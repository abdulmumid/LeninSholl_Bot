import asyncio
import json
import logging
import os
import re
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup

from dotenv import load_dotenv

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env




# ================= –ù–∞—Å—Ç—Ä–æ–π–∫–∏ =================
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
SPAM_INTERVAL = 2           
WARNING_LIMIT = 4
TEMP_BLOCK = 3600               

# ================= ID –≥—Ä—É–ø–ø =================
hooligans_chat_id = -4854123470
ideas_chat_id     = -4882835148
problems_chat_id  = -4927386342

# ================= –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö =================
DATA_FILE = "data.json"
AUTO_SAVE_INTERVAL = 30  

# ================= –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("bot.log", encoding="utf-8")]
)

# ================= –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã =================
user_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì¢ –°–æ–æ–±—â–∏—Ç—å –æ —Ö—É–ª–∏–≥–∞–Ω–µ")],
        [KeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")],
        [KeyboardButton(text="‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ")]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")],
        [KeyboardButton(text="‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
        [KeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

# ================= –•—Ä–∞–Ω–∏–ª–∏—â–µ (in-memory) =================
users = {}               
registered_users = set() 

# ================= –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =================
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ================= –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ =================
BAD_ROOTS = [
    "—Ö—É–π", "—Ö—É—è", "—Ö—É–µ", "–ø–∏–∑–¥", "–ø–∏–∑–¥—é–∫", "–ø–∏–∑–¥–∞", "–µ–±–ª", "–µ–±–∞–Ω", "–µ–±–∞—Ç",
    "—Å—É–∫–∞", "—Å—É–∫–∏", "–µ–±–ª–æ", "–º—É–¥–∞–∫", "–º—É–¥–∏–ª", "–≥–æ–Ω–¥–æ–Ω", "–±–ª—è–¥", "–±–ª—è—Ç—å", "—É–µ–±–æ–∫",
    "—à–ª—é—Ö", "—à–ª—é–ø", "–ø–∏–¥–æ—Ä", "–ø–∏–¥—Ä", "–ø–∏–¥–æ—Ä–æ–∫", "–º–∞–Ω–¥–∞"
]

REPLACE_MAP = {
    "0": "–æ", "1": "–∏", "3": "–µ", "4": "–∞", "5": "—Å", "7": "—Ç", "@": "–∞",
    "q": "–∫", "w": "–≤", "e": "–µ", "r": "—Ä", "t": "—Ç", "y": "—É", "u": "—É",
    "i": "–∏", "o": "–æ", "p": "—Ä", "a": "–∞", "s": "—Å", "d": "–¥", "f": "—Ñ",
    "g": "–≥", "h": "—Ö", "j": "–π", "k": "–∫", "l": "–ª", "z": "–∑", "x": "—Ö",
    "c": "—Å", "v": "–≤", "b": "–≤", "n": "–Ω", "m": "–º"
}

def normalize_text(text: Optional[str]) -> str:
    if not text:
        return ""
    text = text.lower()
    text = "".join([REPLACE_MAP.get(ch, ch) for ch in text])
    text = re.sub(r"[^–∞-—èa-z—ë\s]", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    text = re.sub(r"(.)\1{2,}", r"\1", text)
    return text

BAD_PATTERNS = [re.compile(rf"\b{re.escape(root)}\b", re.IGNORECASE) for root in BAD_ROOTS]
BAD_SUB_PATTERNS = [re.compile(re.escape(root), re.IGNORECASE) for root in BAD_ROOTS]

def contains_profanity(text: Optional[str]) -> bool:
    norm = normalize_text(text)
    for p in BAD_PATTERNS + BAD_SUB_PATTERNS:
        if p.search(norm):
            return True
    return False

# ================= –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞ =================
def _dt_to_iso(dt: Optional[datetime]) -> Optional[str]:
    return dt.isoformat() if isinstance(dt, datetime) else None

def _iso_to_dt(s: Optional[str]) -> Optional[datetime]:
    return datetime.fromisoformat(s) if s else None

def save_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º users –∏ registered_users –≤ DATA_FILE"""
    try:
        to_save = {
            "registered_users": list(registered_users),
            "users": {}
        }
        for uid, info in users.items():
            to_save["users"][str(uid)] = {
                "name": info.get("name"),
                "last_message": _dt_to_iso(info.get("last_message")),
                "warnings": info.get("warnings", 0),
                "temp_block": _dt_to_iso(info.get("temp_block")),
                "permanent_block": info.get("permanent_block", False),
                "awaiting_broadcast_message": info.get("awaiting_broadcast_message", False),
                "awaiting_block_user": info.get("awaiting_block_user", False),
                "awaiting_unblock": info.get("awaiting_unblock", False),
                "category": info.get("category"),
                "messages_count": info.get("messages_count", 0)
            }
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(to_save, f, ensure_ascii=False, indent=2)
        logging.info("Data saved to %s", DATA_FILE)
    except Exception as e:
        logging.exception("Failed to save data: %s", e)

def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º users –∏ registered_users –∏–∑ DATA_FILE (–µ—Å–ª–∏ –µ—Å—Ç—å)"""
    if not os.path.exists(DATA_FILE):
        logging.info("No data file found, starting fresh")
        return
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        regs = data.get("registered_users", [])
        for uid in regs:
            registered_users.add(int(uid))
        raw_users = data.get("users", {})
        for uid_str, info in raw_users.items():
            uid = int(uid_str)
            users[uid] = {
                "name": info.get("name", f"User{uid}"),
                "last_message": _iso_to_dt(info.get("last_message")),
                "warnings": int(info.get("warnings", 0)),
                "temp_block": _iso_to_dt(info.get("temp_block")),
                "permanent_block": bool(info.get("permanent_block", False)),
                "awaiting_broadcast_message": bool(info.get("awaiting_broadcast_message", False)),
                "awaiting_block_user": bool(info.get("awaiting_block_user", False)),
                "awaiting_unblock": bool(info.get("awaiting_unblock", False)),
                "category": info.get("category"),
                "messages_count": int(info.get("messages_count", 0))
            }
        logging.info("Loaded data from %s", DATA_FILE)
    except Exception as e:
        logging.exception("Failed to load data: %s", e)

async def autosave_loop():
    try:
        while True:
            await asyncio.sleep(AUTO_SAVE_INTERVAL)
            save_data()
    except asyncio.CancelledError:
        logging.info("Autosave task cancelled, saving one last time")
        save_data()
        raise

# ================= –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ =================
def init_user(user_id: int, full_name: str = ""):
    if user_id not in users:
        users[user_id] = {
            "name": full_name or f"User{user_id}",
            "last_message": None,
            "warnings": 0,
            "temp_block": None,
            "permanent_block": False,
            "awaiting_broadcast_message": False,
            "awaiting_block_user": False,
            "awaiting_unblock": False,
            "category": None,
            "messages_count": 0
        }
        logging.info("Initialized user %s (%s)", user_id, users[user_id]["name"])
    registered_users.add(user_id)

async def send_to_category_by_payload(sender_id: int, sender_name: str, text: str,
                                     photo, video, document, category: str, caption: str = "") -> bool:
    target_chat = {
        "hooligan": hooligans_chat_id,
        "idea": ideas_chat_id,
        "problem": problems_chat_id
    }.get(category)
    if not target_chat:
        logging.error("Invalid category: %s", category)
        return False
    info = f"–û—Ç: {sender_name} (id: {sender_id})\n–í—Ä–µ–º—è: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}"
    try:
        if photo:
            await bot.send_photo(target_chat, photo[-1].file_id, caption=f"{info}\n\n{caption or text or 'üìé –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
        elif video:
            await bot.send_video(target_chat, video.file_id, caption=f"{info}\n\n{caption or text or 'üé• –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}")
        elif document:
            await bot.send_document(target_chat, document.file_id, caption=f"{info}\n\n{caption or text or 'üìÑ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}")
        else:
            await bot.send_message(target_chat, f"{info}\n\n{text or 'üìé –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'}")
        return True
    except Exception as e:
        logging.exception("Failed to send to category %s: %s", category, e)
        return False

async def send_to_category(user_id: int, msg: Message, category: str):
    init_user(user_id, msg.from_user.full_name if msg.from_user else f"User{user_id}")
    text = msg.text or ""
    caption = msg.caption or ""
    success = await send_to_category_by_payload(
        sender_id=user_id,
        sender_name=(msg.from_user.full_name if msg.from_user else f"User{user_id}"),
        text=text,
        photo=msg.photo if msg.photo else None,
        video=msg.video if hasattr(msg, "video") else None,
        document=msg.document if hasattr(msg, "document") else None,
        category=category,
        caption=caption
    )
    if success:
        await msg.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—É –∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ!")
    else:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# ================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =================
@dp.message(Command("start"))
async def cmd_start(msg: Message):
    user_id = msg.from_user.id
    full_name = msg.from_user.full_name or msg.from_user.first_name or ""
    init_user(user_id, full_name)
    logging.info("/start from %s (%s). Is admin: %s", user_id, full_name, user_id == ADMIN_ID)
    if user_id == ADMIN_ID:
        await msg.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_kb)
    else:
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name or ''}! üëã\n\n"
            "–Ø ‚Äî —à–∫–æ–ª—å–Ω—ã–π –±–æ—Ç, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —Å–æ–æ–±—â–∏—Ç—å –æ –ª—é–±—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ —à–∫–æ–ª–µ –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏.\n\n"
            "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ —Ö—É–ª–∏–≥–∞–Ω–µ\nüí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é\n‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        )
        await msg.answer(welcome_text, reply_markup=user_kb)

@dp.message()
async def handle_all(msg: Message):
    if msg.from_user and msg.from_user.is_bot:
        return

    user_id = msg.from_user.id
    full_name = msg.from_user.full_name or msg.from_user.first_name or ""
    init_user(user_id, full_name)
    user = users[user_id]
    now = datetime.utcnow()
    text = (msg.text or msg.caption or "").strip()
    registered_users.add(user_id)

    logging.info("Message from %s: '%s' | state: warnings=%s perm_block=%s temp_block=%s",
                 user_id, text, user.get("warnings"), user.get("permanent_block"), user.get("temp_block"))

    # ---------- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ----------
    if user.get("permanent_block"):
        await msg.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.")
        return
    if user.get("temp_block") and now < user["temp_block"]:
        remaining = int((user["temp_block"] - now).total_seconds())
        await msg.answer(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å {remaining} —Å–µ–∫—É–Ω–¥.")
        return

    # ---------- –ê–Ω—Ç–∏—Å–ø–∞–º ----------
    if user.get("last_message") and (now - user["last_message"]).total_seconds() < SPAM_INTERVAL:
        await msg.answer(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–¥–æ–∂–¥–∏—Ç–µ {SPAM_INTERVAL} —Å–µ–∫—É–Ω–¥.")
        return
    user["last_message"] = now
    user["messages_count"] = user.get("messages_count", 0) + 1

    # ---------- –§–∏–ª—å—Ç—Ä –º–∞—Ç–∞ ----------
    if contains_profanity(text):
        user["warnings"] += 1
        if user["warnings"] >= WARNING_LIMIT:
            user["temp_block"] = now + timedelta(seconds=TEMP_BLOCK)
            await msg.answer("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞ –º–∞—Ç (1 —á–∞—Å).")
        else:
            await msg.answer(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {user['warnings']}/{WARNING_LIMIT} –∑–∞ –º–∞—Ç.")
        return

    # ---------- –ê–¥–º–∏–Ω: –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ----------
    if user_id == ADMIN_ID:
        if user.get("awaiting_broadcast_message"):
            for uid in list(registered_users):
                if uid == ADMIN_ID:
                    continue
                try:
                    if msg.photo:
                        await bot.send_photo(uid, msg.photo[-1].file_id, caption=msg.caption or msg.text or "")
                    elif hasattr(msg, "video") and msg.video:
                        await bot.send_video(uid, msg.video.file_id, caption=msg.caption or msg.text or "")
                    elif hasattr(msg, "document") and msg.document:
                        await bot.send_document(uid, msg.document.file_id, caption=msg.caption or msg.text or "")
                    else:
                        await bot.send_message(uid, msg.text or "üìé –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                except Exception as e:
                    logging.warning("Broadcast failed to %s: %s", uid, e)
            await msg.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            user["awaiting_broadcast_message"] = False
            return

        # –æ–∂–∏–¥–∞–Ω–∏–µ ID –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if user.get("awaiting_block_user"):
            try:
                uid = int(text)
                if uid not in users:
                    init_user(uid, full_name=f"User{uid}")
                users[uid]["permanent_block"] = True
                await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")
                logging.info("Admin %s blocked %s", user_id, uid)
            except Exception as e:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                logging.error("Invalid uid for block: %s (%s)", text, e)
            user["awaiting_block_user"] = False
            return

        # –æ–∂–∏–¥–∞–Ω–∏–µ ID –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if user.get("awaiting_unblock"):
            try:
                uid = int(text)
                if uid not in users:
                    init_user(uid, full_name=f"User{uid}")
                users[uid]["permanent_block"] = False
                users[uid]["temp_block"] = None
                users[uid]["warnings"] = 0
                await msg.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                logging.info("Admin %s unblocked %s", user_id, uid)
            except Exception as e:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                logging.error("Invalid uid for unblock: %s (%s)", text, e)
            user["awaiting_unblock"] = False
            return

    # ---------- –ö–Ω–æ–ø–∫–∏ (–∞–¥–º–∏–Ω) ----------
    if user_id == ADMIN_ID:
        if text == "üì£ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
            user["awaiting_broadcast_message"] = True
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            total = len(registered_users)
            blocked = sum(1 for u in users.values() if u.get("permanent_block") or (u.get("temp_block") and now < u.get("temp_block")))
            top_users = sorted(users.items(), key=lambda kv: kv[1].get("messages_count", 0), reverse=True)[:5]
            top_text = "\n".join([f"{info['name']} ({uid}): {info.get('messages_count',0)}" for uid, info in top_users]) or "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
            await msg.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked}\n\n–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö:\n{top_text}")
            return
        if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞":
            await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∞–Ω—Ç–∏—Å–ø–∞–º, —Ñ–∏–ª—å—Ç—Ä –º–∞—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. (in-memory + –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ data.json)")
            return
        if text == "‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            user["awaiting_block_user"] = True
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
            return
        if text == "‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            user["awaiting_unblock"] = True
            await msg.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
            return

    # ---------- –ö–Ω–æ–ø–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏) ----------
    if text == "üì¢ –°–æ–æ–±—â–∏—Ç—å –æ —Ö—É–ª–∏–≥–∞–Ω–µ":
        user["category"] = "hooligan"
        await msg.answer("–û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.")
        return
    if text == "üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é":
        user["category"] = "idea"
        await msg.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é.")
        return
    if text == "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ":
        user["category"] = "problem"
        await msg.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É.")
        return

    # ---------- –°–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ----------
    if user.get("category"):
        await send_to_category(user_id, msg, user["category"])
        user["category"] = None
        return

    # ---------- –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ ----------
    if user_id != ADMIN_ID:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=user_kb)
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=admin_kb)

# ================= –°—Ç–∞—Ä—Ç / –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ =================
async def main():
    load_data()
    autosave_task = asyncio.create_task(autosave_loop())
    me = await bot.get_me()
    logging.info("Bot @{0} (id: {1}) starting...".format(me.username, me.id))
    try:
        await dp.start_polling(bot)
    finally:
        autosave_task.cancel()
        try:
            await autosave_task
        except asyncio.CancelledError:
            pass
        save_data()
        logging.info("Bot stopped and data saved")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("Bot stopped by user (KeyboardInterrupt/SystemExit)")
        save_data()
